q
for (i in 1:100){
  f = showEllipse(as.matrix(H[[i]]),C[[i]]$V1,Mx,My,p,500)
  w = wt[[i]]$V1;
  df = data.frame();

  if(abs(w[2])>0) df = data.frame(X = x1, Y = sum(w*C[[i]]$V1)/w[2] - w[1]*x1/w[2]);
  if(abs(w[1])>0) df = data.frame(X = sum(w*C[[i]]$V1)/w[1] - w[2]*x2/w[1], Y = x2);

  if(nrow(df)>0) df = filter(df, abs(X)<=Mx & abs(Y)<=My)

  if(nrow(df)>0) f=f+geom_line(data=df,aes(x=X, y=Y),size=0.5,color="orange");

  print(f+labs(title=paste("Step: ",i)));
  if(readline()=="q") break;
}
q
dfp
dfp
x1
z2
x2
min(x1)
max(x1)
g
showPic(44,g)
g
showPic(44,g)
showPic(45,g)
showPic(50,g)
showPic(51,g)
g
 c
showHyperplane <- function(w,o,p,col="black"){
  df = data.frame();

  gr = p;

  if(abs(w[2])>0){
    slope = - w[1] / w[2];
    intr = sum(o*w)/w[2];
    gr = gr + geom_abline(slope = slope, intercept = intr, linetype = "solid",color=col)
  }
showPic <- function(i,g,xmin=-2,xmax=7.5,ymin=-0.5,ymax=3.5,s=500,title=""){
  p=showEllipse(H[[i-1]],C[[i-1]]$V1,xmin,xmax,ymin,ymax,g,100,col="grey25")
  p=showEllipse(H[[i]],C[[i]]$V1,xmin,xmax,ymin,ymax,g,s)
  showHyperplane(wt[[i]]$V1,C[[i]]$V1,p)+
    ggtitle(paste(title," -- Step: ",i,sep=""))+
    theme(plot.title = element_text(size = 10, face = "bold",hjust = 0, vjust = 0.5))
}
grid.arrange(
  grobs = list(showPic(51,g,s=1000,title="A"),
               showPic(52,g,s=1000,title="B"),
               showPic(53,g,s=1000,title="C"),
               showPic(54,g,s=1000,title="D"),
               showPic(65,g,s=1000,title="E"),
               showPic(70,g,s=1000,title="F"),
               showPic(75,g,s=1000,title="G"),
               showPic(80,g,s=1000,title="H")),
  widths = c(1, 1),
  layout_matrix = rbind(c(1, 2),
                        c(3, 4),
                        c(5, 6),
                        c(7,8)))
showPic <- function(i,g,xmin=-2,xmax=7.5,ymin=-0.5,ymax=3.5,s=500,title=""){
  p=showEllipse(H[[i-1]],C[[i-1]]$V1,xmin,xmax,ymin,ymax,g,100,col="grey25")
  p=showEllipse(H[[i]],C[[i]]$V1,xmin,xmax,ymin,ymax,p,s)
  showHyperplane(wt[[i]]$V1,C[[i]]$V1,p)+
    ggtitle(paste(title," -- Step: ",i,sep=""))+
    theme(plot.title = element_text(size = 10, face = "bold",hjust = 0, vjust = 0.5))
}
grid.arrange(
  grobs = list(showPic(51,g,s=1000,title="A"),
               showPic(52,g,s=1000,title="B"),
               showPic(53,g,s=1000,title="C"),
               showPic(54,g,s=1000,title="D"),
               showPic(65,g,s=1000,title="E"),
               showPic(70,g,s=1000,title="F"),
               showPic(75,g,s=1000,title="G"),
               showPic(80,g,s=1000,title="H")),
  widths = c(1, 1),
  layout_matrix = rbind(c(1, 2),
                        c(3, 4),
                        c(5, 6),
                        c(7,8)))

g
dfpA
 str(convdata)
convdata[1,]
convdata[1,1]
convdata[,1]
convdata[1]
convdata[1][1]
str(convdata)
convdata[[1]][1,]
convdata[[1]][2,]
str(convdata)
convdata[5,]
str(convd)
glimpse(convd)
summary(convd)
str(convd)
sum(is.na(convd$step))
sum(is.na(convd$crit))
sum(is.na(convd$vol))
sum(is.na(convd$df))
sum(is.na(convd$df)))
str(goodc)
glimpse(goodc)
str(goodc)
str(goodc$A)
str(goodc$b)
str(goodc$c)
str(goodc$H)
str(goodc$C)
str(goodc$convdata)
summary(kcases$step)
summary(kcase2$step)
str(kcase2$step)
str(kcase2)
str(kcase2$convdata)
summary(kcase2$convdata)
summary(pcase2$convdata)
summary(badc3$convdata$step)
summary(badc3$convdata$crit)
summary(badc3$convdata$df)
sum(is.na(badc3$convdata$df))
sum(is.na(badc3$convdata$crit))
sum(is.na(badc3$convdata$step))
min(badc3$convdata$crit)
d = badc3$convdata$df
d[length(d)]
length(d)
max(badc3$convdata$step)
max(badc3$convdata$step)
rm(badc3)
badc3
badc3$convdata$step
str(badc3)
filename="logs//randcaseNN10x20_16.log"
str(convd$step)
max(convd$step)
max(convdata[,2])
unique(convdata[,2])
max(convd$step)
unique(convdata[,2])
unique(convdata[,2])
unique(convdata[,2])
unique(convdata[,2])
plot(badc3$convdata$df)
str(kmc)
max(dt[[2]]$convdata$step)
str(dt[2])
str(dt[[2]])
dt
glimpse(dt[[1]])
glimpse(dt[[1]]$convdata)
dt[[1]]$convdata
dt[1]$convdata
dt[[1]]$H
st
st
dt$convdata$step
max(dt$convdata$step)
st
kmc
rm(kmc)
c(st)
do.call(c, unlist(st, recursive=FALSE))
unlist(st)
;
exit
quit()
n
